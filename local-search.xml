<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>关于某票务平台-爬虫-2</title>
    <link href="/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/"/>
    <url>/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>8月1日该票务平台突然更新了，增加了 wasm (即: WebAssembly)，其实写稿当天发现又更新了，于是边写稿，边盘它。</p><h2 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h2><p>通过查看脚本运行日志，发现是在占座请求接口增加了两个参数而且增加了反调试，如下图。</p><p><img src="/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/image.png" alt="反调试"></p><p>经过一番检索后，顺利通过了反调试，成功抓取了占座请求接口</p><p><img src="/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/image-1.png" alt="占座请求接口"></p><p>抓包后发现增加了，val(get) 和 dataString(post)，这两个参数应该是通过了某种方式进行了加密。</p><h2 id="进行中"><a href="#进行中" class="headerlink" title="进行中"></a>进行中</h2><p>老办法，通过启动器看看调用了哪些函数。</p><p><img src="/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/image-2.png" alt="启动器"></p><p>秘密应该就在 seating-addone.js 中的 purchase() 函数的 49 行附近中</p><p><img src="/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/image-3.png" alt="purchase函数截图"></p><p>然而滑到 49 行附近，发现后面的js代码都进行了混淆</p><p><img src="/2024/08/29/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-2/image-4.png" alt="purchase 混淆截图"></p><p>于是尝试一下反混淆，这里推荐一个反混淆工具js-deobfuscator: <a href="https://github.com/kuizuo/js-deobfuscator">https://github.com/kuizuo/js-deobfuscator</a></p><p>经过反混淆后，简单浏览一下。找到关键的加密过程如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> length = <span class="hljs-number">32</span>;<br><span class="hljs-keyword">var</span> hash_ptr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_malloc</span>(length);<br><span class="hljs-keyword">var</span> length2 = <span class="hljs-number">48</span>;<br><span class="hljs-keyword">var</span> ciphertext_ptr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_malloc</span>(length2);<br><span class="hljs-title class_">Module</span>.<span class="hljs-title function_">ccall</span>(<span class="hljs-string">&quot;gen&quot;</span>, <span class="hljs-string">&quot;void&quot;</span>, [<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>], [payloadString, hash_ptr, eStr2, ciphertext_ptr, length2, <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>]);<br><span class="hljs-keyword">var</span> hashtext_array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-property">HEAP8</span>.<span class="hljs-property">buffer</span>, hash_ptr, length);<br>hashValue = <span class="hljs-title function_">array2hex</span>(hashtext_array);<br><span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_free</span>(hash_ptr);<br><span class="hljs-keyword">var</span> ciphertext_array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-property">HEAP8</span>.<span class="hljs-property">buffer</span>, ciphertext_ptr, length2);<br><span class="hljs-keyword">let</span> ciphertext = <span class="hljs-title function_">array2hex</span>(ciphertext_array);<br><span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_free</span>(ciphertext_array);<br>payload.<span class="hljs-property">dataString</span> = ciphertext;<br>holdSeatUrl = holdSeatUrl + <span class="hljs-string">&quot;?val=&quot;</span> + hashValue + <span class="hljs-string">&quot;&amp;_=&quot;</span> + timestamp;<br></code></pre></td></tr></table></figure><p>于是这段关键加密过程中，hashValue 以及 ciphertext 就分别对应 val 和 dataString 。<br>然后经过本地的 node 环境和命令调试一番提示 Module 没有定义。而且更新后在 Dev tools 中 控制器 调试输出是没办法输出的。</p><p>一番折腾下，发现这个 Module 在其他的js中进行了加载，即 seating.js，而且这个 seating.js 中对 seating.wasm 进行了加载读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-comment">// 对 Module 定义</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Module</span> = <span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Module</span> != <span class="hljs-string">&quot;undefined&quot;</span> ? <span class="hljs-title class_">Module</span> : &#123;&#125;;<br><span class="hljs-comment">/** 省略部分js code */</span><br>wasmBinaryFile = <span class="hljs-string">&quot;seating.wasm&quot;</span>;<br></code></pre></td></tr></table></figure><p>即：seating.wasm为第三方文件(后经了解为 wasm 文件), seating.js负责加载wasm文件以及定义 Module, seating-addone.js负责发送占座请求(即: purchase 函数)<br>也就是说，其实我在本地调试的时候在 seating.js 中加入加密过程就可以直接得到密文。</p><p>于是又在本地调试了一番，发现本地调试 seating.js 过程中没有定义 navigator 以及 eStr2 变量意义不清楚，(后话：最后发现其实这两个变量可以为空)那么对 seating.js 进行一番修改，把 seating-addone.js 的加密过程复制到 seating.js 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">const</span> mockNavigator = &#123; <span class="hljs-comment">// XXX 这个不清楚为什么可以定义为空</span><br>    <span class="hljs-comment">// userAgent: &#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36&#x27;,</span><br>    <span class="hljs-comment">// appCodeName: &#x27;Mozilla&#x27;,</span><br>    <span class="hljs-comment">// appVersion: &#x27;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36&#x27;,</span><br>&#125;;<br><span class="hljs-comment">// 将模拟 navigator 对象分配给全局变量</span><br><span class="hljs-variable language_">global</span>.<span class="hljs-property">navigator</span> = mockNavigator;<br><br><span class="hljs-keyword">let</span> eStr2 = &#123;&#125; <span class="hljs-comment">// XXX 这个不知道为什么可以为空</span><br><span class="hljs-keyword">let</span> cookie = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">let</span> payloadString = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">const</span> fileName = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">let</span> hashValue = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">var</span> length = <span class="hljs-number">32</span>;<br><span class="hljs-keyword">var</span> hash_ptr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_malloc</span>(length);<br><span class="hljs-keyword">var</span> length2 = <span class="hljs-number">48</span>;<br><span class="hljs-keyword">var</span> ciphertext_ptr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_malloc</span>(length2);<br><span class="hljs-title class_">Module</span>.<span class="hljs-title function_">ccall</span>(<span class="hljs-string">&quot;gen&quot;</span>, <span class="hljs-string">&quot;void&quot;</span>, [<span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-string">&quot;string&quot;</span>], [payloadString, hash_ptr, eStr2, ciphertext_ptr, length2, cookie]);<br><span class="hljs-keyword">var</span> hashtext_array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-property">HEAP8</span>.<span class="hljs-property">buffer</span>, hash_ptr, length);<br>hashValue = <span class="hljs-title function_">array2hex</span>(hashtext_array);<br><span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_free</span>(hash_ptr);<br><span class="hljs-keyword">var</span> ciphertext_array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Module</span>.<span class="hljs-property">HEAP8</span>.<span class="hljs-property">buffer</span>, ciphertext_ptr, length2);<br><span class="hljs-keyword">let</span> dataString = <span class="hljs-title function_">array2hex</span>(ciphertext_array);<br><span class="hljs-title class_">Module</span>.<span class="hljs-title function_">_free</span>(ciphertext_array);<br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> content = <span class="hljs-string">&quot;hashValue: &quot;</span> + hashValue + <span class="hljs-string">&quot;\n&quot;</span> + <span class="hljs-string">&quot;dataString: &quot;</span> + dataString;<br><span class="hljs-comment">// const fileName = &quot;aaa.txt&quot;</span><br><span class="hljs-comment">// XXX 由于console.log() 被某机制进行了拦截，无法输出，只要保存到文件中进行查看结果 </span><br>fs.<span class="hljs-title function_">writeFileSync</span>(fileName, content);<br></code></pre></td></tr></table></figure><p>既然在 Dev tools 上也无法输出，那么可以尝试一下把浏览器中的seating.js进行覆盖并打算断点。<br>然后把断点处的cookie, eStr2, payloadString, hashValue, dataString 的变量值进行复制，用于验证生成 aaa.txt 中的结果与断点处 hashValue, dataString 是否一致。</p><p>验证过程省略(忘记截图了)，就此加密过程搞定</p><h2 id="Python-中解决加密过程"><a href="#Python-中解决加密过程" class="headerlink" title="Python 中解决加密过程"></a>Python 中解决加密过程</h2><h3 id="尝试过程："><a href="#尝试过程：" class="headerlink" title="尝试过程："></a>尝试过程：</h3><h4 id="1、刚开始想通过-python-对-seating-wasm-进行加载然后将关键加密过程翻译为-python-无奈第一次接触-wasm-，失败告终。"><a href="#1、刚开始想通过-python-对-seating-wasm-进行加载然后将关键加密过程翻译为-python-无奈第一次接触-wasm-，失败告终。" class="headerlink" title="1、刚开始想通过 python 对 seating.wasm 进行加载然后将关键加密过程翻译为 python, 无奈第一次接触 wasm ，失败告终。"></a>1、刚开始想通过 python 对 seating.wasm 进行加载然后将关键加密过程翻译为 python, 无奈第一次接触 wasm ，失败告终。</h4><h4 id="2、尝试通过-python-对js相关函数进行调用-PyExecJS-框架-，无奈-seating-js-中对-seating-wasm-的加载过程用了很多-callback-看得头疼，失败告终。"><a href="#2、尝试通过-python-对js相关函数进行调用-PyExecJS-框架-，无奈-seating-js-中对-seating-wasm-的加载过程用了很多-callback-看得头疼，失败告终。" class="headerlink" title="2、尝试通过 python 对js相关函数进行调用( PyExecJS 框架)，无奈 seating.js 中对 seating.wasm 的加载过程用了很多 callback 看得头疼，失败告终。"></a>2、尝试通过 python 对js相关函数进行调用( PyExecJS 框架)，无奈 seating.js 中对 seating.wasm 的加载过程用了很多 callback 看得头疼，失败告终。</h4><h4 id="3、只能用回最笨的办法了，python中读取-seating-js-作为模板文件-然后在把-cookie-payloadString-进行替换并保存对应-对应-js-文件。最后-python-运行-node-hashjs-x2F-js-命令，由于-console-log-被拦截无奈只能把结果写入对应结果文件中了，最后-python-读取对应结果文件。"><a href="#3、只能用回最笨的办法了，python中读取-seating-js-作为模板文件-然后在把-cookie-payloadString-进行替换并保存对应-对应-js-文件。最后-python-运行-node-hashjs-x2F-js-命令，由于-console-log-被拦截无奈只能把结果写入对应结果文件中了，最后-python-读取对应结果文件。" class="headerlink" title="3、只能用回最笨的办法了，python中读取 seating.js(作为模板文件) 然后在把 cookie, payloadString 进行替换并保存对应 *(对应).js 文件。最后 python 运行 node hashjs&#x2F;*.js 命令，由于 console.log() 被拦截无奈只能把结果写入对应结果文件中了，最后 python 读取对应结果文件。"></a>3、只能用回最笨的办法了，python中读取 seating.js(作为模板文件) 然后在把 cookie, payloadString 进行替换并保存对应 *(对应).js 文件。最后 python 运行 node hashjs&#x2F;*.js 命令，由于 console.log() 被拦截无奈只能把结果写入对应结果文件中了，最后 python 读取对应结果文件。</h4><p>最后实现过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">__getHashValue</span>(<span class="hljs-params">self, data</span>):<br>    js_path = <span class="hljs-string">&quot;hashjs/&quot;</span><br>    js_text = self.__readFile(<span class="hljs-string">&quot;seating2.js&quot;</span>)<br>    js_text = js_text.replace(<br>        <span class="hljs-string">&#x27;let payloadString = &quot;&quot;&#x27;</span>, <span class="hljs-string">&quot;let payloadString = &#x27;&quot;</span> + json.dumps(data) + <span class="hljs-string">&quot;&#x27;&quot;</span><br>    )<br>    js_text = js_text.replace(<br>        <span class="hljs-string">&#x27;let cookie = &quot;&quot;&#x27;</span>, <span class="hljs-string">&#x27;let cookie = &quot;&#x27;</span> + self.__dealCookie() + <span class="hljs-string">&#x27;&quot;&#x27;</span><br>    )<br>    <span class="hljs-comment"># js 运行结果文件</span><br>    result_filename = js_path + self.email_username + <span class="hljs-string">&quot;.txt&quot;</span>  <span class="hljs-comment"># </span><br>    js_text = js_text.replace(<br>        <span class="hljs-string">&#x27;const fileName = &quot;&quot;&#x27;</span>, <span class="hljs-string">&#x27;const fileName = &quot;&#x27;</span> + result_filename + <span class="hljs-string">&#x27;&quot;&#x27;</span><br>    )<br>    <br>    js_filename = js_path + self.email_username + <span class="hljs-string">&quot;.js&quot;</span><br>    self.__writeFile(js_filename, js_text)<br>    cmd = <span class="hljs-string">&quot;node &quot;</span> + js_filename<br>    self.__execCmd(cmd) <span class="hljs-comment"># node 命令运行 js 文件</span><br><br>    <span class="hljs-comment"># result_filename = js_path + result_filename</span><br>    result = self.__readFile(result_filename)<br>    self.logging.info(<span class="hljs-string">&quot;js_result: &quot;</span> + <span class="hljs-built_in">str</span>(result))<br>    result = result.split(<span class="hljs-string">&quot;: &quot;</span>)<br>    <span class="hljs-built_in">hash</span> = result[<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;\ndataString&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>    data_str = result[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>, data_str<br></code></pre></td></tr></table></figure><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>就此更新完成，至于 seating.wasm 文件，后经了解，由 C&#x2F;C++ 编写与编译完成的。<br>经过一番搜索，wabt(<a href="https://github.com/WebAssembly/wabt">https://github.com/WebAssembly/wabt</a>) 可以反编译 wasm文件。<br>通过 wabt 反编译后，看了半天(没看懂)。<br>但是看到别人调试 wasm 文件过程：(但是没尝试)</p><ol><li><a href="https://www.cnblogs.com/luocodes/p/14006078.html">https://www.cnblogs.com/luocodes/p/14006078.html</a></li><li><a href="https://www.anquanke.com/post/id/254427">https://www.anquanke.com/post/id/254427</a></li></ol><p>虽然没弄懂 wasm 中的具体加密手段，但是最后 python 的爬虫程序是能成功运行的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于某票务平台-爬虫-1</title>
    <link href="/2024/08/25/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-1/"/>
    <url>/2024/08/25/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-1/</url>
    
    <content type="html"><![CDATA[<h2 id="关于某票务平台-1"><a href="#关于某票务平台-1" class="headerlink" title="关于某票务平台-1"></a>关于某票务平台-1</h2><p>这里在正式购票前会弹出 google recaptcha V2 的验证程序(如下图)</p><p><img src="/2024/08/25/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-1/image.png" alt="google recapthca V2"></p><p>这里recaptcha V2的验证采用第三方解码平台进行绕过后，进行登录并抓包后发现</p><p>竟然提交了 loginId 与 password 这两个字段</p><p>而且登录过程中没有输入账号与密码</p><p><img src="/2024/08/25/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-1/image-1.png" alt="登录抓包"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">loginId: 暂时不清楚是如何生成的<br>password: 同上<br>recaptchaResponse: google recaptcha V2 通过校验后返回的字段<br></code></pre></td></tr></table></figure><p>在Dev tools 中继续分析</p><p><img src="/2024/08/25/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-1/image-3.png" alt="启动器"></p><p>可以知道最后提交登录时函数执行顺序：onclick()-&gt;submitLogin()-&gt;doLogin()-&gt;ajax()-&gt;send()，这里从submitLogin()开始分析</p><p>submitLogin()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> submitLogin = <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e) e.<span class="hljs-title function_">preventDefault</span>();<br>  $(<span class="hljs-string">&quot;#loginForm .errorMsg&quot;</span>).<span class="hljs-title function_">hide</span>();<br>  $(<span class="hljs-string">&quot;#loginForm input&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br><br>  <span class="hljs-keyword">var</span> loginId = $(<span class="hljs-string">&quot;#inputEmail&quot;</span>).<span class="hljs-title function_">val</span>();<br>  <span class="hljs-keyword">var</span> password = $(<span class="hljs-string">&quot;#inputPassword&quot;</span>).<span class="hljs-title function_">val</span>();<br>  <span class="hljs-keyword">var</span> captcha = $(<span class="hljs-string">&quot;#inputCaptcha&quot;</span>).<span class="hljs-title function_">val</span>();<br><br>  <span class="hljs-comment">// validation</span><br>  <span class="hljs-keyword">if</span> (loginId == <span class="hljs-string">&quot;&quot;</span>) $(<span class="hljs-string">&quot;#inputEmail&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">else</span> $(<span class="hljs-string">&quot;#inputEmail&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">if</span> (password == <span class="hljs-string">&quot;&quot;</span>) $(<span class="hljs-string">&quot;#inputPassword&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">else</span> $(<span class="hljs-string">&quot;#inputPassword&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;LEGACY&quot;</span> &amp;&amp; captcha == <span class="hljs-string">&quot;&quot;</span>)<br>    $(<span class="hljs-string">&quot;#inputCaptcha&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">else</span> $(<span class="hljs-string">&quot;#inputCaptcha&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;RECAPTCHA&quot;</span> &amp;&amp; !recaptchaResponse)<br>    $(<span class="hljs-string">&quot;#loginRecaptcha&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">else</span> $(<span class="hljs-string">&quot;#loginRecaptcha&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;TURNSTILE&quot;</span> &amp;&amp; !turnstileResponse)<br>    $(<span class="hljs-string">&quot;#loginTurnstile&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">else</span> $(<span class="hljs-string">&quot;#loginTurnstile&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;invalid required&quot;</span>);<br>  <span class="hljs-keyword">if</span> (<br>    (!isCitylineLogin &amp;&amp; (loginId == <span class="hljs-string">&quot;&quot;</span> || password == <span class="hljs-string">&quot;&quot;</span>)) ||<br>    (verifyType == <span class="hljs-string">&quot;LEGACY&quot;</span> &amp;&amp; captcha == <span class="hljs-string">&quot;&quot;</span>) ||<br>    (verifyType == <span class="hljs-string">&quot;RECAPTCHA&quot;</span> &amp;&amp; recaptchaResponse == <span class="hljs-string">&quot;&quot;</span>) ||<br>    (verifyType == <span class="hljs-string">&quot;TURNSTILE&quot;</span> &amp;&amp; turnstileResponse == <span class="hljs-string">&quot;&quot;</span>)<br>  ) &#123;<br>    <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;LEGACY&quot;</span>) &#123;<br>      <span class="hljs-comment">// reload captcha if submit login failed</span><br>      <span class="hljs-title function_">getCaptcha</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;RECAPTCHA&quot;</span>) &#123;<br>      <span class="hljs-comment">// reload reCaptcha if submit login failed</span><br>      <span class="hljs-title function_">renderRecaptcha</span>($.<span class="hljs-title function_">i18n</span>().<span class="hljs-property">locale</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;TURNSTILE&quot;</span>) &#123;<br>      <span class="hljs-comment">// reload turnstile if submit login failed</span><br>      <span class="hljs-title function_">renderTurnstile</span>($.<span class="hljs-title function_">i18n</span>().<span class="hljs-property">locale</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-title function_">doLogin</span>(loginId, password, captcha);<br>&#125;;<br></code></pre></td></tr></table></figure><p>doLogin()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">var</span> doLogin = <span class="hljs-keyword">function</span> (<span class="hljs-params">inputLogin, inputPassword, verifyCode</span>) &#123;<br>  <span class="hljs-keyword">var</span> loginId = inputLogin; <span class="hljs-comment">// f02</span><br>  <span class="hljs-keyword">var</span> password = inputPassword; <span class="hljs-comment">// 12345678</span><br>  <span class="hljs-keyword">var</span> password_sha256 = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-title class_">SHA256</span>(password).<span class="hljs-title function_">toString</span>();<br><br>  <span class="hljs-keyword">var</span> loginRequest = &#123;&#125;;<br>  loginRequest[<span class="hljs-string">&quot;loginId&quot;</span>] = loginId;<br>  loginRequest[<span class="hljs-string">&quot;password&quot;</span>] = password_sha256;<br>  <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;LEGACY&quot;</span>) loginRequest[<span class="hljs-string">&quot;verifyCode&quot;</span>] = verifyCode;<br>  <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;RECAPTCHA&quot;</span>)<br>    loginRequest[<span class="hljs-string">&quot;recaptchaResponse&quot;</span>] = recaptchaResponse;<br>  <span class="hljs-keyword">if</span> (verifyType == <span class="hljs-string">&quot;TURNSTILE&quot;</span>)<br>    loginRequest[<span class="hljs-string">&quot;turnstileResponse&quot;</span>] = turnstileResponse;<br>  $.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: contextPath + <span class="hljs-string">&quot;/internet/api/client/login&quot;</span>,<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(loginRequest),<br>    <span class="hljs-attr">contentType</span>: <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;json&quot;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-comment">// 省略</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里可以看出关键就在于doLogin()函数中，</p><p>CryptoJS.SHA256(password).toString()对password进行了加密。</p><p>这里有很奇怪的是提交的loginId为空，那么password字段又是怎么来的呢？</p><p>(这里猜测了一下password本来就是空的，以至于后面sha256加密也是对空字符进行加密)随便找个在线sha256加密的工具验证一下猜测</p><p><img src="/2024/08/25/%E5%85%B3%E4%BA%8E%E6%9F%90%E7%A5%A8%E5%8A%A1%E5%B9%B3%E5%8F%B0-%E7%88%AC%E8%99%AB-1/image-4.png" alt="sha256在线加密"></p><p>结果显然易见了，和猜测的一样。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/23/hello-world/"/>
    <url>/2022/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>or </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>or </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>or </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo d<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
